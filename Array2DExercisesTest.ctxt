#BlueJ class context
comment0.params=
comment0.target=void\ setUp()
comment0.text=\n\ Sets\ up\ the\ test\ fixture\ with\ some\ arrays\ to\ test.\n\ This\ method\ is\ called\ before\ every\ test\ case\ method.\n
comment1.params=
comment1.target=void\ testMaxNormal()
comment1.text=\ \n\ Test\ max\ is\ found\ correctly\ (last\ element\ in\ the\ search)\n
comment10.params=
comment10.target=void\ testIsColumnMagicFalse()
comment10.text=\n\ Test\ col\ magic\ where\ col\ sums\ are\ not\ the\ same\n
comment11.params=
comment11.target=void\ testIsSquareTrue()
comment11.text=\n\ Test\ for\ square\ arrays\n
comment12.params=
comment12.target=void\ testIsSquareFalse()
comment12.text=\n\ Test\ for\ non-square\ arrays\n
comment13.params=
comment13.target=void\ testIsMagicTrue()
comment13.text=\n\ Test\ where\ all\ conditions\ for\ magic\ square\ are\ met\n
comment14.params=
comment14.target=void\ testIsMagicNotSquare()
comment14.text=\n\ Test\ magic\ square\ false\ because\ row\ and\ col\ sums\ are\ not\ the\ same\n
comment15.params=
comment15.target=void\ testIsMagicFalseBadDiags()
comment15.text=\n\ Test\ magic\ square\ false\ because\ row\ and\ col\ sums\ are\ the\ same\ BUT\ diags\ are\ not\n
comment16.params=
comment16.target=void\ testIsMagicFalseBadRows()
comment16.text=\n\ Test\ magic\ square\ false\ because\ (only)\ row\ sums\ are\ not\ the\ same\n
comment17.params=
comment17.target=void\ testIsLatinatrue()
comment17.text=\n\ Test\ isLatin\ is\ true\ for\ a\ valid\ latin\ square\n
comment18.params=
comment18.target=void\ testIsLatinFalse()
comment18.text=\n\ Test\ isLatin\ is\ false\ for\ threr\ invalid\ cases\n
comment19.params=
comment19.target=void\ testIsSequenceTrue()
comment19.text=\n\ Test\ isSequence\ for\ a\ valid\ 3x3\ array\ containing\ 1..9\n
comment2.params=
comment2.target=void\ testMaxAllNeg()
comment2.text=\n\ Test\ max\ correct\ when\ all\ vals\ are\ negative\ \n
comment20.params=
comment20.target=void\ testIsSequenceNotSquare()
comment20.text=\n\ Test\ isSequence\ false\ because\ array\ not\ square\n
comment21.params=
comment21.target=void\ testIsSequenceRepeatsFalse()
comment21.text=\n\ Test\ isSequence\ false\ because\ array\ contains\ duplicates\n
comment22.params=
comment22.target=void\ testIsSequenceBadValsFalse()
comment22.text=\n\ Test\ isSequence\ false\ because\ array\ vals\ do\ not\ form\ a\ sequence\n
comment3.params=
comment3.target=void\ testRowSum()
comment3.text=\n\ Test\ row\ sum\ calculated\ correctly\ including\ for\ nonsquare\ arrays\n
comment4.params=
comment4.target=void\ testColumnSum()
comment4.text=\n\ Test\ column\ sum\ calculated\ correctly\ for\ standard\ cases\n
comment5.params=
comment5.target=void\ testColumnSumRagged()
comment5.text=\n\ Test\ column\ sum\ calculated\ correctly\ for\ nonsquare\ arrays\n\ This\ checks\ for\ sum\ of\ incomplete\ columns\ (from\ ragged\ arrays)\n
comment6.params=
comment6.target=void\ testAllRowSums()
comment6.text=\n\ Checks\ array\ of\ row\ sums\ correctly\ calculated\n
comment7.params=
comment7.target=void\ testIsRowMagicTrue()
comment7.text=\n\ Test\ for\ row\ magic\ with\ a\ valid\ magic\ square\n
comment8.params=
comment8.target=void\ testIsRowMagicFalse()
comment8.text=\n\ Test\ for\ row\ magic\ where\ row\ sums\ are\ not\ the\ same\n
comment9.params=
comment9.target=void\ testIsColumnMagicTrue()
comment9.text=\n\ Test\ col\ magic\ where\ col\ sums\ are\ the\ same\n
numComments=23
